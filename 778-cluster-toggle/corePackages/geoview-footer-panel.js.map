{"version":3,"file":"corePackages/geoview-footer-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-footer-panel/src/details-item.tsx","webpack://geoview-core/../geoview-footer-panel/src/legend-item.tsx","webpack://geoview-core/../geoview-footer-panel/src/data-item.tsx","webpack://geoview-core/../geoview-footer-panel/src/index.tsx"],"sourcesContent":["/* eslint-disable react/require-default-props */\nimport { ReactElement } from 'react';\n\nimport {\n  TypeWindow,\n  payloadIsAMapSingleClick,\n  payloadIsAllQueriesDone,\n  TypeArrayOfLayerData,\n  getLocalizedValue,\n  Coordinate,\n} from 'geoview-core';\n\ninterface Props {\n  mapId: string;\n}\n\nconst w = window as TypeWindow;\n\n/**\n * Create an element that displays the details component\n *\n * @returns {JSX.Element} created details component\n */\nexport function DetailsItem({ mapId }: Props): JSX.Element {\n  const { cgpv } = w;\n  const { api, react } = cgpv;\n\n  const { useState, useEffect } = react;\n\n  const [details, setDetails] = useState<TypeArrayOfLayerData>([]);\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const [list, setList] = useState<ReactElement>();\n  const [latLng, setLatLng] = useState<Coordinate>([]);\n  const [handlerName, setHandlerName] = useState<string | null>(null);\n\n  useEffect(() => {\n    // create the listener to return the details\n    api.event.on(\n      api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE,\n      (payload) => {\n        if (payloadIsAllQueriesDone(payload)) {\n          const { resultSets } = payload;\n          const newDetails: TypeArrayOfLayerData = [];\n          Object.keys(resultSets).forEach((layerPath) => {\n            const layerName = getLocalizedValue(api.map(mapId).layer.registeredLayers[layerPath].layerName, mapId)!;\n            const features = resultSets[layerPath]!;\n            if (features.length > 0) {\n              newDetails.push({ layerPath, layerName, features });\n            }\n          });\n          if (newDetails.length > 0) {\n            setDetails(newDetails);\n          } else {\n            setDetails([]);\n          }\n        } else {\n          setDetails([]);\n        }\n      },\n      mapId,\n      `${mapId}-DetailsAPI`\n    );\n    api.event.on(\n      api.eventNames.MAP.EVENT_MAP_SINGLE_CLICK,\n      (payload) => {\n        if (payloadIsAMapSingleClick(payload)) {\n          const { coordinates } = payload;\n          setHandlerName(payload.handlerName);\n          setLatLng(coordinates.lnglat);\n        } else {\n          setLatLng([]);\n        }\n      },\n      mapId\n    );\n    return () => {\n      api.event.off(api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE, mapId);\n      api.event.off(api.eventNames.MAP.EVENT_MAP_SINGLE_CLICK, mapId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setList(api.map(mapId).details.createDetails(mapId, details, { mapId, location: latLng, handlerName }));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [details, latLng]);\n\n  return <div>{list}</div>;\n}\n","/* eslint-disable react/require-default-props */\nimport { DetailedReactHTMLElement } from 'react';\nimport { TypeWindow, payloadIsALayerConfig, payloadIsRemoveGeoViewLayer } from 'geoview-core';\n\ninterface Props {\n  mapId: string;\n}\nconst w = window as TypeWindow;\n\n/**\n * Create an element that displays the legend component\n *\n * @returns {JSX.Element} created legend component\n */\nexport function LegendItem({ mapId }: Props): JSX.Element {\n  const { cgpv } = w;\n  const { api, react } = cgpv;\n\n  const { useState, useEffect } = react;\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const [legend, setLegend] = useState<DetailedReactHTMLElement<{}, HTMLElement>>();\n  const [mapLayers, setMapLayers] = useState<string[]>([]);\n\n  const addLayer = (addGeoviewLayerId: string) => {\n    if (Object.keys(api.map(mapId).layer.geoviewLayers).includes(addGeoviewLayerId)) {\n      setMapLayers((orderedLayers) => [addGeoviewLayerId, ...orderedLayers]);\n    } else {\n      console.error('geoviewLayerId is not in the layers list');\n    }\n  };\n\n  const removeLayer = (removeGeoviewLayerId: string) => {\n    setMapLayers((orderedLayers) => orderedLayers.filter((layerId) => layerId !== removeGeoviewLayerId));\n  };\n\n  useEffect(() => {\n    setMapLayers(Object.keys(api.map(mapId!).layer.geoviewLayers));\n    api.event.on(\n      api.eventNames.LAYER.EVENT_REMOVE_LAYER,\n      (payload) => {\n        if (payloadIsRemoveGeoViewLayer(payload)) {\n          removeLayer(payload.geoviewLayer.geoviewLayerId);\n        }\n      },\n      mapId\n    );\n    api.event.on(\n      api.eventNames.LAYER.EVENT_ADD_LAYER,\n      (payload) => {\n        if (payloadIsALayerConfig(payload)) {\n          api.event.on(\n            api.eventNames.LAYER.EVENT_LAYER_ADDED,\n            () => {\n              addLayer(payload.layerConfig.geoviewLayerId);\n              api.event.off(api.eventNames.LAYER.EVENT_LAYER_ADDED, mapId, payload.layerConfig.geoviewLayerId);\n            },\n            mapId,\n            payload.layerConfig.geoviewLayerId\n          );\n        }\n      },\n      mapId\n    );\n    return () => {\n      api.event.off(api.eventNames.LAYER.EVENT_ADD_LAYER, mapId);\n      api.event.off(api.eventNames.LAYER.EVENT_REMOVE_LAYER, mapId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setLegend(api.map(mapId).legend.createLegend({ layerIds: mapLayers }));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [mapLayers]);\n\n  return <div>{legend}</div>;\n}\n","/* eslint-disable react/require-default-props */\nimport { TypeWindow, getLocalizedValue, TypeTabs } from 'geoview-core';\n\ninterface Props {\n  mapId: string;\n}\nconst w = window as TypeWindow;\n\n/**\n * Create an element that displays the data grid footer component\n *\n * @returns {JSX.Element} created data grid footer component\n */\nexport function DataItem({ mapId }: Props): JSX.Element {\n  const { cgpv } = w;\n  const { api, ui, react } = cgpv;\n  const { Tabs } = ui.elements;\n\n  const { useState, useEffect } = react;\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const [dataLayers, setDataLayers] = useState<string[]>([]);\n\n  useEffect(() => {\n    setDataLayers(Object.keys(api.map(mapId!).layer.geoviewLayers));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Tabs\n      tabsProps={{\n        variant: 'scrollable',\n      }}\n      tabs={dataLayers.map((layerId, index): TypeTabs => {\n        const geoviewLayerInstance = api.map(mapId).layer.geoviewLayers[layerId];\n        const labelValue = getLocalizedValue(geoviewLayerInstance.geoviewLayerName, mapId);\n        return {\n          value: index,\n          label: labelValue !== undefined ? labelValue : `data-${index}`,\n          content: () => api.map(mapId).dataGrid.createDataGrid({ layerId }),\n        };\n      })}\n    />\n  );\n}\n","import {\n  Cast,\n  AbstractPlugin,\n  TypePluginOptions,\n  TypeButtonPanel,\n  TypeWindow,\n  toJsonObject,\n  TypeJsonObject,\n  AnySchemaObject,\n  payloadIsAllQueriesDone,\n  TypeArrayOfFeatureInfoEntries,\n} from 'geoview-core';\n\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-footer-panel.json';\nimport { DetailsItem } from './details-item';\nimport { LegendItem } from './legend-item';\nimport { DataItem } from './data-item';\n\nconst w = window as TypeWindow;\n\ntype CustomTabs = {\n  title: string;\n  contentHTML: string;\n};\n\n/**\n * Create a class for the plugin instance\n */\nclass FooterPanelPlugin extends AbstractPlugin {\n  // store the created button panel object\n  buttonPanel: TypeButtonPanel | null;\n\n  constructor(pluginId: string, props: TypePluginOptions) {\n    super(pluginId, props);\n    this.buttonPanel = null;\n  }\n\n  /**\n   * Return the package schema\n   *\n   * @returns {AnySchemaObject} the package schema\n   */\n  schema = (): AnySchemaObject => schema;\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    en: {\n      legend: 'Legend',\n      details: 'Details',\n      dataGrid: 'Data',\n    },\n    fr: {\n      legend: 'Légende',\n      details: 'Détails',\n      dataGrid: 'Données',\n    },\n  });\n\n  /**\n   * Added function called after the plugin has been initialized\n   */\n  added = (): void => {\n    const { configObj, pluginProps } = this;\n\n    const { mapId } = pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    if (cgpv) {\n      // access the api calls\n      const { api } = cgpv;\n      const { displayLanguage, footerTabs, map } = api.map(mapId);\n\n      const mapContainer = map.getTargetElement().parentElement;\n      // Set size of map container based on whether footer-panel is collapsed or not\n      if (mapContainer) {\n        if (configObj?.collapsed === false) {\n          mapContainer.style.height = 'calc( 100% - 300px )';\n        } else {\n          mapContainer.style.height = 'calc( 100% - 55px )';\n        }\n      }\n\n      const defaultTabs = configObj?.tabs.defaultTabs as Array<string>;\n      let tabsCounter = 0;\n\n      if (defaultTabs.includes('legend')) {\n        // create new tab and add the LegendComponent to the footer tab\n        footerTabs.createFooterTab({\n          value: tabsCounter,\n          label: this.translations[displayLanguage].legend as string,\n          content: () => <LegendItem mapId={mapId} />,\n        });\n        tabsCounter++;\n      }\n\n      // create the listener to return the details\n      if (defaultTabs.includes('details')) {\n        // create new tab and add the DetailComponent to the footer tab\n        const detailsTabValue = tabsCounter;\n        footerTabs.createFooterTab({\n          value: detailsTabValue,\n          label: this.translations[displayLanguage].details as string,\n          content: () => <DetailsItem mapId={mapId} />,\n        });\n        tabsCounter++;\n        // select the details tab when map click queries are done\n        api.event.on(\n          api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE,\n          (payload) => {\n            if (payloadIsAllQueriesDone(payload)) {\n              const { resultSets } = payload;\n              let features: TypeArrayOfFeatureInfoEntries = [];\n              Object.keys(resultSets).forEach((layerPath) => {\n                features = features.concat(resultSets[layerPath]!);\n              });\n              if (features.length > 0) {\n                footerTabs.selectFooterTab(detailsTabValue);\n              }\n            }\n          },\n          mapId,\n          `${mapId}-DetailsAPI`\n        );\n      }\n\n      if (defaultTabs.includes('data-grid')) {\n        /// create new tab and add the DataGridComponent to the footer tab\n        footerTabs.createFooterTab({\n          value: tabsCounter,\n          label: this.translations[displayLanguage].dataGrid as string,\n          content: () => <DataItem mapId={mapId} />,\n        });\n        tabsCounter++;\n      }\n\n      // TODO add custom detail reusable component when done\n\n      const customTabs = configObj?.tabs.customTabs as Array<string>;\n      for (let i = 0; i < customTabs.length; i++) {\n        const tab = customTabs[i] as unknown as CustomTabs;\n\n        footerTabs.createFooterTab({\n          value: tabsCounter,\n          label: tab.title,\n          content: tab.contentHTML,\n        });\n        tabsCounter++;\n      }\n    }\n  };\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  removed(): void {\n    // const { mapId } = this.pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    if (cgpv) {\n      // access the api calls\n      // const { api } = cgpv;\n      // TODO: Enable the footer tabs removal\n    }\n  }\n}\n\nexport default FooterPanelPlugin;\n\nw.plugins = w.plugins || {};\nw.plugins['footer-panel'] = Cast<AbstractPlugin>(FooterPanelPlugin);\n"],"names":["w","window","DetailsItem","mapId","cgpv","api","react","useState","useEffect","details","setDetails","list","setList","latLng","setLatLng","handlerName","setHandlerName","event","on","eventNames","GET_FEATURE_INFO","ALL_QUERIES_DONE","payload","payloadIsAllQueriesDone","resultSets","newDetails","Object","keys","forEach","layerPath","layerName","getLocalizedValue","map","layer","registeredLayers","features","length","push","MAP","EVENT_MAP_SINGLE_CLICK","payloadIsAMapSingleClick","coordinates","lnglat","off","createDetails","location","LegendItem","legend","setLegend","mapLayers","setMapLayers","geoviewLayers","LAYER","EVENT_REMOVE_LAYER","removeGeoviewLayerId","payloadIsRemoveGeoViewLayer","geoviewLayer","geoviewLayerId","orderedLayers","filter","layerId","EVENT_ADD_LAYER","payloadIsALayerConfig","EVENT_LAYER_ADDED","addGeoviewLayerId","layerConfig","includes","console","error","createLegend","layerIds","DataItem","ui","Tabs","elements","dataLayers","setDataLayers","tabsProps","variant","tabs","index","geoviewLayerInstance","labelValue","geoviewLayerName","value","label","undefined","content","dataGrid","createDataGrid","FooterPanelPlugin","pluginId","props","schema","toJsonObject","defaultConfig","en","fr","configObj","pluginProps","displayLanguage","footerTabs","mapContainer","getTargetElement","parentElement","collapsed","style","height","defaultTabs","tabsCounter","createFooterTab","translations","detailsTabValue","concat","selectFooterTab","customTabs","i","tab","title","contentHTML","buttonPanel","AbstractPlugin","plugins","Cast"],"sourceRoot":""}