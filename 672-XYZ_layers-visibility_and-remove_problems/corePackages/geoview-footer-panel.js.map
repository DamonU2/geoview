{"version":3,"file":"corePackages/geoview-footer-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-footer-panel/src/details-item.tsx","webpack://geoview-core/../geoview-footer-panel/src/legend-item.tsx","webpack://geoview-core/../geoview-footer-panel/src/index.tsx"],"sourcesContent":["/* eslint-disable react/require-default-props */\nimport { ReactElement } from 'react';\n\nimport { TypeWindow, payloadIsAllQueriesDone, TypeArrayOfLayerData, getLocalizedValue } from 'geoview-core';\n\ninterface Props {\n  mapId: string;\n}\nconst w = window as TypeWindow;\n\n/**\n * Create an element that displays the details component\n *\n * @returns {JSX.Element} created details component\n */\nexport function DetailsItem({ mapId }: Props): JSX.Element {\n  const { cgpv } = w;\n  const { api, react } = cgpv;\n\n  const { useState, useEffect } = react;\n\n  const [details, setDetails] = useState<TypeArrayOfLayerData>([]);\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const [list, setList] = useState<ReactElement>();\n\n  useEffect(() => {\n    // create the listener to return the details\n    api.event.on(\n      api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE,\n      (payload) => {\n        if (payloadIsAllQueriesDone(payload)) {\n          const { resultSets } = payload;\n          const newDetails: TypeArrayOfLayerData = [];\n          Object.keys(resultSets).forEach((layerPath) => {\n            const layerName = getLocalizedValue(api.map(mapId).layer.registeredLayers[layerPath].layerName, mapId)!;\n            const features = resultSets[layerPath]!;\n            if (features.length > 0) {\n              newDetails.push({ layerPath, layerName, features });\n            }\n          });\n          if (newDetails.length > 0) {\n            setDetails(newDetails);\n          } else {\n            setDetails([]);\n          }\n        } else {\n          setDetails([]);\n        }\n      },\n      mapId,\n      `${mapId}-DetailsAPI`\n    );\n    return () => {\n      api.event.off(api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE, mapId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setList(api.map(mapId).details.createDetails(mapId, details));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [details]);\n\n  return <div>{list}</div>;\n}\n","/* eslint-disable react/require-default-props */\nimport { DetailedReactHTMLElement } from 'react';\nimport { TypeWindow, payloadIsALayerConfig, payloadIsRemoveGeoViewLayer } from 'geoview-core';\n\ninterface Props {\n  mapId: string;\n}\nconst w = window as TypeWindow;\n\n/**\n * Create an element that displays the legend component\n *\n * @returns {JSX.Element} created legend component\n */\nexport function LegendItem({ mapId }: Props): JSX.Element {\n  const { cgpv } = w;\n  const { api, react } = cgpv;\n\n  const { useState, useEffect } = react;\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const [legend, setLegend] = useState<DetailedReactHTMLElement<{}, HTMLElement>>();\n  const [mapLayers, setMapLayers] = useState<string[]>([]);\n\n  const addLayer = (addGeoviewLayerId: string) => {\n    if (Object.keys(api.map(mapId).layer.geoviewLayers).includes(addGeoviewLayerId)) {\n      setMapLayers((orderedLayers) => [addGeoviewLayerId, ...orderedLayers]);\n    } else {\n      console.error('geoviewLayerId is not in the layers list');\n    }\n  };\n\n  const removeLayer = (removeGeoviewLayerId: string) => {\n    setMapLayers((orderedLayers) => orderedLayers.filter((layerId) => layerId !== removeGeoviewLayerId));\n  };\n\n  useEffect(() => {\n    setMapLayers(Object.keys(api.map(mapId!).layer.geoviewLayers));\n    api.event.on(\n      api.eventNames.LAYER.EVENT_REMOVE_LAYER,\n      (payload) => {\n        if (payloadIsRemoveGeoViewLayer(payload)) {\n          removeLayer(payload.geoviewLayer.geoviewLayerId);\n        }\n      },\n      mapId\n    );\n    api.event.on(\n      api.eventNames.LAYER.EVENT_ADD_LAYER,\n      (payload) => {\n        if (payloadIsALayerConfig(payload)) {\n          api.event.on(\n            api.eventNames.LAYER.EVENT_LAYER_ADDED,\n            () => {\n              addLayer(payload.layerConfig.geoviewLayerId);\n              api.event.off(api.eventNames.LAYER.EVENT_LAYER_ADDED, mapId, payload.layerConfig.geoviewLayerId);\n            },\n            mapId,\n            payload.layerConfig.geoviewLayerId\n          );\n        }\n      },\n      mapId\n    );\n    return () => {\n      api.event.off(api.eventNames.LAYER.EVENT_ADD_LAYER, mapId);\n      api.event.off(api.eventNames.LAYER.EVENT_REMOVE_LAYER, mapId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setLegend(api.map(mapId).legend.createLegend({ layerIds: mapLayers }));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [mapLayers]);\n\n  return <div>{legend}</div>;\n}\n","import {\n  Cast,\n  AbstractPlugin,\n  TypePluginOptions,\n  TypeButtonPanel,\n  TypeWindow,\n  toJsonObject,\n  TypeJsonObject,\n  AnySchemaObject,\n} from 'geoview-core';\n\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-footer-panel.json';\nimport { DetailsItem } from './details-item';\nimport { LegendItem } from './legend-item';\n\nconst w = window as TypeWindow;\n\ntype CustomTabs = {\n  title: string;\n  contentHTML: string;\n};\n\n/**\n * Create a class for the plugin instance\n */\nclass FooterPanelPlugin extends AbstractPlugin {\n  // store the created button panel object\n  buttonPanel: TypeButtonPanel | null;\n\n  constructor(pluginId: string, props: TypePluginOptions) {\n    super(pluginId, props);\n    this.buttonPanel = null;\n  }\n\n  /**\n   * Return the package schema\n   *\n   * @returns {AnySchemaObject} the package schema\n   */\n  schema = (): AnySchemaObject => schema;\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    en: {\n      legend: 'Legend',\n      details: 'Details',\n      dataGrid: 'Data',\n    },\n    fr: {\n      legend: 'Légende',\n      details: 'Détails',\n      dataGrid: 'Données',\n    },\n  });\n\n  /**\n   * Added function called after the plugin has been initialized\n   */\n  added = (): void => {\n    const { configObj, pluginProps } = this;\n\n    const { mapId } = pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    if (cgpv) {\n      // access the api calls\n      const { api } = cgpv;\n      const { displayLanguage } = api.map(mapId);\n      const { footerTabs } = api.map(mapId);\n\n      const defaultTabs = configObj?.tabs.defaultTabs as Array<string>;\n      let tabsCounter = 0;\n\n      if (defaultTabs.includes('legend')) {\n        // create new tab and add the LegendComponent to the footer tab\n        footerTabs.createFooterTab({\n          value: tabsCounter,\n          label: this.translations[displayLanguage].legend as string,\n          content: () => <LegendItem mapId={mapId} />,\n        });\n        tabsCounter++;\n      }\n\n      // create the listener to return the details\n      if (defaultTabs.includes('details')) {\n        // the call to create details element return the element and the footer content is waiting for a function.\n        footerTabs.createFooterTab({\n          value: tabsCounter,\n          label: this.translations[displayLanguage].details as string,\n          content: () => <DetailsItem mapId={mapId} />,\n        });\n        tabsCounter++;\n      }\n\n      if (defaultTabs.includes('data-grid')) {\n        // the call to create data grid element return the element and the footer content is waiting for a function.\n        footerTabs.createFooterTab({\n          value: tabsCounter,\n          label: this.translations[displayLanguage].dataGrid as string,\n          content: () => api.map(mapId).dataGrid.createDataGrid({ layerId: 'esriFeatureLYR4' }),\n        });\n        tabsCounter++;\n      }\n\n      // TODO add custom detail reusable component when done\n\n      const customTabs = configObj?.tabs.customTabs as Array<string>;\n      for (let i = 0; i < customTabs.length; i++) {\n        const tab = customTabs[i] as unknown as CustomTabs;\n\n        footerTabs.createFooterTab({\n          value: tabsCounter,\n          label: tab.title,\n          content: tab.contentHTML,\n        });\n        tabsCounter++;\n      }\n    }\n  };\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  removed(): void {\n    // const { mapId } = this.pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    if (cgpv) {\n      // access the api calls\n      // const { api } = cgpv;\n      // TODO: Enable the footer tabs removal\n    }\n  }\n}\n\nexport default FooterPanelPlugin;\n\nw.plugins = w.plugins || {};\nw.plugins['footer-panel'] = Cast<AbstractPlugin>(FooterPanelPlugin);\n"],"names":["w","window","DetailsItem","mapId","cgpv","api","react","useState","useEffect","details","setDetails","list","setList","event","on","eventNames","GET_FEATURE_INFO","ALL_QUERIES_DONE","payload","payloadIsAllQueriesDone","resultSets","newDetails","Object","keys","forEach","layerPath","layerName","getLocalizedValue","map","layer","registeredLayers","features","length","push","off","createDetails","LegendItem","legend","setLegend","mapLayers","setMapLayers","geoviewLayers","LAYER","EVENT_REMOVE_LAYER","removeGeoviewLayerId","payloadIsRemoveGeoViewLayer","geoviewLayer","geoviewLayerId","orderedLayers","filter","layerId","EVENT_ADD_LAYER","payloadIsALayerConfig","EVENT_LAYER_ADDED","addGeoviewLayerId","layerConfig","includes","console","error","createLegend","layerIds","FooterPanelPlugin","pluginId","props","schema","toJsonObject","defaultConfig","en","dataGrid","fr","configObj","pluginProps","displayLanguage","footerTabs","defaultTabs","tabs","tabsCounter","createFooterTab","value","label","translations","content","createDataGrid","customTabs","i","tab","title","contentHTML","buttonPanel","AbstractPlugin","plugins","Cast"],"sourceRoot":""}