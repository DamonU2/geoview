{"version":3,"file":"corePackages/geoview-layers-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-layers-panel/src/layer-stepper.tsx","webpack://geoview-core/../geoview-layers-panel/src/panel-content.tsx","webpack://geoview-core/../geoview-layers-panel/src/index.tsx"],"sourcesContent":["/* eslint-disable react/require-default-props */\nimport {\n  TypeWindow,\n  TypeJsonArray,\n  TypeGeoviewLayerConfig,\n  TypeGeoviewLayerType,\n  SelectChangeEvent,\n  snackbarMessagePayload,\n  ButtonPropsLayerPanel,\n  TypeListOfLayerEntryConfig,\n  TypeJsonObject,\n} from 'geoview-core';\n\ntype Event = { target: { value: string } };\n\ninterface Props {\n  mapId: string;\n  setAddLayerVisible: (isVisible: boolean) => void;\n}\n\ntype EsriOptions = {\n  err: string;\n  capability: string;\n};\n\nconst w = window as TypeWindow;\n\n/**\n * A react component that displays the details panel content\n *\n * @returns {JSX.Element} A React JSX Element with the details panel\n */\nfunction LayerStepper({ mapId, setAddLayerVisible }: Props): JSX.Element {\n  const { cgpv } = w;\n  const { api, react, ui } = cgpv;\n\n  const { ESRI_DYNAMIC, ESRI_FEATURE, GEOJSON, WMS, WFS, OGC_FEATURE, XYZ_TILES, GEOCORE } = api.layerTypes;\n  const { useState, useEffect } = react;\n  const { Select, Stepper, TextField, Button, ButtonGroup, Autocomplete, CircularProgressBase, Box, IconButton, CloseIcon } = ui.elements;\n\n  const [activeStep, setActiveStep] = useState(0);\n  const [layerURL, setLayerURL] = useState('');\n  const [layerType, setLayerType] = useState<TypeGeoviewLayerType | ''>('');\n  const [layerList, setLayerList] = useState<TypeJsonArray[]>([]);\n  const [layerName, setLayerName] = useState('');\n  const [layerEntries, setLayerEntries] = useState<TypeListOfLayerEntryConfig>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const sxClasses = {\n    buttonGroup: {\n      paddingTop: 12,\n      gap: 6,\n    },\n  };\n\n  // TODO see issue #714, removed adding multiple layerType === WMS until resolved\n  const isMultiple = () => layerType === ESRI_DYNAMIC || layerType === WFS;\n\n  /**\n   * List of layer types and labels\n   */\n  const layerOptions = [\n    [ESRI_DYNAMIC, 'ESRI Dynamic Service'],\n    [ESRI_FEATURE, 'ESRI Feature Service'],\n    [GEOJSON, 'GeoJSON'],\n    [WMS, 'OGC Web Map Service (WMS)'],\n    [WFS, 'OGC Web Feature Service (WFS)'],\n    [OGC_FEATURE, 'OGC API Features'],\n    [XYZ_TILES, 'XYZ Raster Tiles'],\n    [GEOCORE, 'GeoCore'],\n  ];\n\n  useEffect(() => {\n    api.event.on(\n      api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN,\n      (payload) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        if (payload.message && payload.message.value === 'validation.layer.loadfailed') {\n          setIsLoading(false);\n        }\n      },\n      mapId\n    );\n    return () => {\n      api.event.off(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, mapId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * Returns the appropriate error config for ESRI layer types\n   *\n   * @param type one of esriDynamic or esriFeature\n   * @returns {EsriOptions} an error configuration object for populating dialogues\n   */\n  const esriOptions = (type: string): EsriOptions => {\n    switch (type) {\n      case ESRI_DYNAMIC:\n        return { err: 'ESRI Map', capability: 'Map' };\n      case ESRI_FEATURE:\n        return { err: 'ESRI Feature', capability: 'Query' };\n      default:\n        return { err: '', capability: '' };\n    }\n  };\n\n  /**\n   * Emits an error dialogue when a text field is empty\n   *\n   * @param textField label for the TextField input that cannot be empty\n   */\n  const emitErrorEmpty = (textField: string) => {\n    setIsLoading(false);\n    api.event.emit(\n      snackbarMessagePayload(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, mapId, {\n        type: 'string',\n        value: `${textField} cannot be empty`,\n      })\n    );\n  };\n\n  /**\n   * Emits an error when the URL does not support the selected service type\n   *\n   * @param serviceName type of service provided by the URL\n   */\n  const emitErrorServer = (serviceName: string) => {\n    setIsLoading(false);\n    api.event.emit(\n      snackbarMessagePayload(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, mapId, {\n        type: 'string',\n        value: `URL is not a valid ${serviceName} Server`,\n      })\n    );\n  };\n\n  /**\n   * Emits an error when a service does not support the current map projection\n   *\n   * @param serviceName type of service provided by the URL\n   * @param proj current map projection\n   */\n  const emitErrorProj = (serviceName: string, proj: string | undefined, supportedProj: TypeJsonArray | string[]) => {\n    setIsLoading(false);\n    api.event.emit(\n      snackbarMessagePayload(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, mapId, {\n        type: 'string',\n        value: `${serviceName} does not support current map projection ${proj}, only ${supportedProj.join(', ')}`,\n      })\n    );\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid WMS,\n   * and add either Name and Entry directly to state if a single layer,\n   * or a list of Names / Entries if multiple layer options exist.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const wmsValidation = async (): Promise<boolean> => {\n    const proj = api.projection.projections[api.map(mapId).currentProjection].getCode();\n    let supportedProj: string[] = [];\n    try {\n      const [baseUrl, queryString] = layerURL.split('?');\n      const urlParams = new URLSearchParams(queryString);\n      const layersParam = urlParams.get('layers');\n      const wms = await api.geoUtilities.getWMSServiceMetadata(baseUrl, layersParam ?? '');\n      supportedProj = wms.Capability.Layer.CRS as string[];\n      if (!supportedProj.includes(proj)) throw new Error('proj');\n      const layers: TypeJsonArray[] = [];\n      const hasChildLayers = (layer: TypeJsonObject) => {\n        if (layer.Layer && layer.Layer.length > 0) {\n          (layer.Layer as TypeJsonObject[]).forEach((childLayer: TypeJsonObject) => {\n            hasChildLayers(childLayer);\n          });\n        } else {\n          layers.push([layer.Name, layer.Title] as TypeJsonArray);\n        }\n      };\n      if (wms.Capability.Layer) {\n        hasChildLayers(wms.Capability.Layer);\n      }\n      if (layers.length === 1) {\n        setLayerName(layers[0][1] as string);\n        setLayerEntries([\n          {\n            layerId: (layersParam ?? layers[0][0]) as string,\n          },\n        ]);\n      } else {\n        setLayerList(layers);\n      }\n    } catch (err) {\n      if ((err as Error).message === 'proj') {\n        emitErrorProj('WMS', proj, supportedProj);\n      } else {\n        emitErrorServer('WMS');\n      }\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid WFS,\n   * and add either Name and Entry directly to state if a single layer,\n   * or a list of Names / Entries if multiple layer options exist.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const wfsValidation = async (): Promise<boolean> => {\n    try {\n      const wfs = await api.geoUtilities.getWFSServiceMetadata(layerURL);\n      const layers = (wfs.FeatureTypeList.FeatureType as TypeJsonArray).map((aFeatureType) => [\n        (aFeatureType.Name['#text'] as string).split(':')[1] as TypeJsonObject,\n        aFeatureType.Title['#text'],\n      ]);\n      if (layers.length === 1) {\n        setLayerName(layers[0][1] as string);\n        setLayerEntries([\n          {\n            layerId: layers[0][0] as string,\n          },\n        ]);\n      } else {\n        setLayerList(layers);\n      }\n    } catch (err) {\n      emitErrorServer('WFS');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid OGC API.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const ogcFeatureValidation = async (): Promise<boolean> => {\n    const keys = ['collections', 'links'];\n    try {\n      const response = await fetch(`${layerURL}/collections?f=json`);\n      const json = await response.json();\n      const isValid = keys.every((key) => Object.keys(json).includes(key));\n      if (!isValid) throw new Error('err');\n      const layers = (json.collections as TypeJsonArray).map((aFeatureType) => [aFeatureType.id, aFeatureType.title]);\n      if (layers.length === 1) {\n        setLayerName(layers[0][1] as string);\n        setLayerEntries([\n          {\n            layerId: layers[0][0] as string,\n          },\n        ]);\n      } else {\n        setLayerList(layers);\n      }\n    } catch (err) {\n      emitErrorServer('OGC API Feature');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid Geocore UUID.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const geocoreValidation = async (): Promise<boolean> => {\n    try {\n      const isValid = layerURL.indexOf('/') === -1 && layerURL.replaceAll('-', '').length === 32;\n      if (!isValid) throw new Error('err');\n      setLayerName('');\n      setLayerEntries([\n        {\n          layerId: layerURL,\n        },\n      ]);\n    } catch (err) {\n      emitErrorServer('GeoCore UUID');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid ESRI Server,\n   * and add either Name and Entry directly to state if a single layer,\n   * or a list of Names / Entries if multiple layer options exist.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const esriValidation = async (type: string): Promise<boolean> => {\n    try {\n      const esri = await api.geoUtilities.getESRIServiceMetadata(layerURL);\n      if ((esri.capabilities as string).includes(esriOptions(type).capability)) {\n        if ('layers' in esri) {\n          const layers = (esri.layers as TypeJsonArray).map((aLayer) => [aLayer.id, aLayer.name]);\n          if (layers.length === 1) {\n            setLayerName(layers[0][1] as string);\n            setLayerEntries([\n              {\n                layerId: layers[0][0] as string,\n              },\n            ]);\n          } else {\n            setLayerList(layers);\n          }\n        } else {\n          setLayerName(esri.name as string);\n          setLayerEntries([\n            {\n              layerId: esri.id as string,\n            },\n          ]);\n        }\n      } else {\n        throw new Error('err');\n      }\n    } catch (err) {\n      emitErrorServer(esriOptions(type).err);\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid XYZ Server.\n   *\n   * @returns {boolean} True if layer passes validation\n   */\n  const xyzValidation = (): boolean => {\n    const proj = api.projection.projections[api.map(mapId).currentProjection].getCode();\n    const tiles = ['{x}', '{y}', '{z}'];\n    for (let i = 0; i < tiles.length; i += 1) {\n      if (!layerURL.includes(tiles[i])) {\n        emitErrorServer('XYZ Tile');\n        return false;\n      }\n    }\n    if (proj !== 'EPSG:3857') {\n      emitErrorProj('XYZ Tiles', proj, ['EPSG:3857']);\n      return false;\n    }\n    const dataAccessPath = layerURL;\n    setLayerName('');\n    setLayerEntries([\n      {\n        layerId: layerURL,\n        source: {\n          dataAccessPath: {\n            en: dataAccessPath,\n            fr: dataAccessPath,\n          },\n        },\n      },\n    ]);\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid GeoJSON.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const geoJSONValidation = async (): Promise<boolean> => {\n    try {\n      const response = await fetch(layerURL);\n      const json = await response.json();\n      if (!['FeatureCollection', 'Feature'].includes(json.type)) {\n        throw new Error('err');\n      }\n      const layerId = layerURL.split('/').pop() as string;\n      const dataAccessPath = layerURL.replace(layerId, '');\n      setLayerName(layerId);\n      setLayerEntries([\n        {\n          layerId,\n          source: {\n            dataAccessPath: {\n              en: dataAccessPath,\n              fr: dataAccessPath,\n            },\n          },\n        },\n      ]);\n    } catch (err) {\n      emitErrorServer('GeoJSON');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Attempt to determine the layer type based on the URL format\n   */\n  const bestGuessLayerType = () => {\n    const layerTokens = layerURL.toUpperCase().split('/');\n    const layerId = parseInt(layerTokens[layerTokens.length - 1], 10);\n    if (layerURL.toUpperCase().endsWith('MAPSERVER') || layerURL.toUpperCase().endsWith('MAPSERVER/')) {\n      setLayerType(ESRI_DYNAMIC);\n    } else if (\n      layerURL.toUpperCase().indexOf('FEATURESERVER') !== -1 ||\n      (layerURL.toUpperCase().indexOf('MAPSERVER') !== -1 && !Number.isNaN(layerId))\n    ) {\n      setLayerType(ESRI_FEATURE);\n    } else if (layerTokens.indexOf('WFS') !== -1) {\n      setLayerType(WFS);\n    } else if (layerURL.toUpperCase().endsWith('.JSON') || layerURL.toUpperCase().endsWith('.GEOJSON')) {\n      setLayerType(GEOJSON);\n    } else if (layerURL.toUpperCase().indexOf('{Z}/{X}/{Y}') !== -1 || layerURL.toUpperCase().indexOf('{Z}/{Y}/{X}') !== -1) {\n      setLayerType(XYZ_TILES);\n    } else if (layerURL.indexOf('/') === -1 && layerURL.replaceAll('-', '').length === 32) {\n      setLayerType(GEOCORE);\n    } else if (layerURL.toUpperCase().indexOf('WMS') !== -1) {\n      setLayerType(WMS);\n    }\n  };\n\n  /**\n   * Handle the behavior of the 'Continue' button in the Stepper UI\n   */\n  const handleStep1 = () => {\n    let valid = true;\n    if (layerURL.trim() === '') {\n      valid = false;\n      emitErrorEmpty('URL');\n    }\n    if (valid) {\n      bestGuessLayerType();\n      setActiveStep(1);\n    }\n  };\n\n  /**\n   * Handle the behavior of the 'Continue' button in the Stepper UI\n   */\n  const handleStep2 = async () => {\n    setIsLoading(true);\n    let valid = true;\n    if (layerType === undefined) {\n      valid = false;\n      setIsLoading(false);\n      emitErrorEmpty('Service Type');\n    } else if (layerType === WMS) valid = await wmsValidation();\n    else if (layerType === WFS) valid = await wfsValidation();\n    else if (layerType === OGC_FEATURE) valid = await ogcFeatureValidation();\n    else if (layerType === XYZ_TILES) valid = xyzValidation();\n    else if (layerType === ESRI_DYNAMIC) valid = await esriValidation(ESRI_DYNAMIC);\n    else if (layerType === ESRI_FEATURE) valid = await esriValidation(ESRI_FEATURE);\n    else if (layerType === GEOJSON) valid = await geoJSONValidation();\n    else if (layerType === GEOCORE) valid = await geocoreValidation();\n    if (valid) {\n      setIsLoading(false);\n      setActiveStep(2);\n    }\n  };\n\n  /**\n   * Handle the behavior of the 'Finish' button in the Stepper UI\n   */\n  const handleStep3 = () => {\n    let valid = true;\n    if (layerEntries.length === 0) {\n      valid = false;\n      emitErrorEmpty('Layer');\n    }\n    if (valid) setActiveStep(3);\n  };\n\n  /**\n   * Handle the behavior of the 'Finish' button in the Stepper UI\n   */\n  const handleStepLast = () => {\n    setIsLoading(true);\n    const geoviewLayerId = api.generateId();\n    api.event.on(\n      api.eventNames.LAYER.EVENT_LAYER_ADDED,\n      () => {\n        api.event.off(api.eventNames.LAYER.EVENT_LAYER_ADDED, mapId);\n        setIsLoading(false);\n        setAddLayerVisible(false);\n      },\n      mapId,\n      geoviewLayerId\n    );\n\n    let valid = true;\n    const name = layerName;\n    let url = layerURL;\n    if (layerType === ESRI_DYNAMIC || layerType === ESRI_FEATURE) {\n      url = api.geoUtilities.getMapServerUrl(layerURL);\n    }\n    if (layerType === WMS) {\n      [url] = layerURL.split('?');\n    }\n\n    if (layerName === '') {\n      valid = false;\n      emitErrorEmpty(isMultiple() ? 'Name' : 'Layer');\n    }\n    const layerConfig: TypeGeoviewLayerConfig = {\n      geoviewLayerId,\n      geoviewLayerName: {\n        en: name,\n        fr: name,\n      },\n      geoviewLayerType: layerType as TypeGeoviewLayerType,\n      metadataAccessPath: {\n        en: url,\n        fr: url,\n      },\n      listOfLayerEntryConfig: layerEntries as TypeListOfLayerEntryConfig,\n    };\n\n    if (layerType === GEOJSON || layerType === XYZ_TILES) {\n      // TODO probably want an option to add metadata if geojson\n      // need to clear our metadata path or it will give errors trying to find it\n      layerConfig.metadataAccessPath = {\n        en: '',\n        fr: '',\n      };\n    }\n    if (layerType === GEOCORE) {\n      delete layerConfig.metadataAccessPath;\n    }\n    if (valid) {\n      // TODO issue #668 - geocore layers do not have same ID, it is impossible to use the added event\n      // workaround - close after 3 sec\n      if (layerType === GEOCORE) {\n        setTimeout(() => {\n          setIsLoading(false);\n          setAddLayerVisible(false);\n        }, 3000);\n      }\n      api.map(mapId).layer.addGeoviewLayer(layerConfig);\n    }\n  };\n\n  /**\n   * Handle the behavior of the 'Back' button in the Stepper UI\n   */\n  const handleBack = () => {\n    setActiveStep((prevActiveStep: number) => prevActiveStep - 1);\n  };\n\n  /**\n   * Set layer URL from form input\n   *\n   * @param e TextField event\n   */\n  const handleInput = (event: Event) => {\n    setLayerURL(event.target.value.trim());\n    setLayerType('');\n    setLayerList([]);\n    setLayerName('');\n    setLayerEntries([]);\n  };\n\n  /**\n   * Set layerType from form input\n   *\n   * @param {SelectChangeEvent} event TextField event\n   */\n  const handleSelectType = (event: SelectChangeEvent<unknown>) => {\n    setLayerType(event.target.value as TypeGeoviewLayerType);\n    setLayerList([]);\n    setLayerName('');\n    setLayerEntries([]);\n  };\n\n  /**\n   * Set the currently selected layer from a list\n   *\n   * @param event Select event\n   * @param newValue value/label pairs of select options\n   */\n  const handleSelectLayer = (event: Event, newValue: string[]) => {\n    if (isMultiple()) {\n      setLayerEntries(\n        newValue.map((x: string) => {\n          return { layerId: `${x[0]}` };\n        })\n      );\n      setLayerName(newValue.map((x) => x[1]).join(', '));\n    } else {\n      setLayerEntries([{ layerId: `${newValue[0]}` }]);\n      setLayerName(newValue[1]);\n    }\n  };\n\n  /**\n   * Set the layer name from form input\n   *\n   * @param e TextField event\n   */\n  const handleNameLayer = (event: Event) => {\n    setLayerName(event.target.value);\n  };\n\n  /**\n   * Creates a set of Continue / Back buttons\n   *\n   * @param param0 specify if button is first or last in the list\n   * @returns {JSX.Element} React component\n   */\n  // eslint-disable-next-line react/no-unstable-nested-components\n  function NavButtons({ isFirst = false, isLast = false, handleNext }: ButtonPropsLayerPanel): JSX.Element {\n    return isLoading ? (\n      <Box sx={{ padding: 10 }}>\n        <CircularProgressBase />\n      </Box>\n    ) : (\n      <ButtonGroup sx={sxClasses.buttonGroup}>\n        <Button variant=\"contained\" type=\"text\" onClick={handleNext}>\n          {isLast ? 'Finish' : 'Continue'}\n        </Button>\n        {!isFirst && (\n          <Button variant=\"contained\" type=\"text\" onClick={handleBack}>\n            Back\n          </Button>\n        )}\n      </ButtonGroup>\n    );\n  }\n\n  return (\n    <>\n      <Box sx={{ display: 'flex', justifyContent: 'end', zIndex: 2 }}>\n        <IconButton color=\"primary\" onClick={() => setAddLayerVisible(false)}>\n          <CloseIcon />\n        </IconButton>\n      </Box>\n      <Stepper\n        sx={{ position: 'relative', top: '-30px', zIndex: 1 }}\n        activeStep={activeStep}\n        orientation=\"vertical\"\n        steps={[\n          {\n            stepLabel: {\n              children: 'Enter URL / UUID',\n            },\n            stepContent: {\n              children: (\n                <>\n                  <TextField sx={{ width: '100%' }} label=\"URL\" variant=\"standard\" value={layerURL} onChange={handleInput} multiline />\n                  <br />\n                  <NavButtons isFirst handleNext={handleStep1} />\n                </>\n              ),\n            },\n          },\n          {\n            stepLabel: {\n              children: 'Select format',\n            },\n            stepContent: {\n              children: (\n                <>\n                  <Select\n                    fullWidth\n                    labelId=\"service-type-label\"\n                    value={layerType}\n                    onChange={handleSelectType}\n                    label=\"Service Type\"\n                    inputLabel={{\n                      id: 'service-type-label',\n                    }}\n                    menuItems={layerOptions.map(([value, label]) => ({\n                      key: value,\n                      item: {\n                        value,\n                        children: label,\n                      },\n                    }))}\n                  />\n                  <NavButtons handleNext={handleStep2} />\n                </>\n              ),\n            },\n          },\n          {\n            stepLabel: {\n              children: 'Configure layer',\n            },\n            stepContent: {\n              children: (\n                <>\n                  {layerList.length === 0 && <TextField label=\"Name\" variant=\"standard\" value={layerName} onChange={handleNameLayer} />}\n                  {layerList.length > 1 && (\n                    <Autocomplete\n                      fullWidth\n                      multiple={isMultiple()}\n                      disableCloseOnSelect\n                      disableClearable={!isMultiple()}\n                      id=\"service-layer-label\"\n                      options={layerList}\n                      getOptionLabel={(option) => `${option[1]} (${option[0]})`}\n                      renderOption={(props, option) => <span {...props}>{option[1]}</span>}\n                      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                      onChange={handleSelectLayer as any}\n                      renderInput={(params) => <TextField {...params} label=\"Select Layer\" />}\n                    />\n                  )}\n                  <br />\n                  <NavButtons isLast={!isMultiple()} handleNext={isMultiple() ? handleStep3 : handleStepLast} />\n                </>\n              ),\n            },\n          },\n          isMultiple()\n            ? {\n                stepLabel: {\n                  children: 'Enter Name',\n                },\n                stepContent: {\n                  children: (\n                    <>\n                      <TextField sx={{ width: '100%' }} label=\"Name\" variant=\"standard\" value={layerName} onChange={handleNameLayer} />\n                      <br />\n                      <NavButtons isLast handleNext={handleStepLast} />\n                    </>\n                  ),\n                },\n              }\n            : null,\n        ]}\n      />\n    </>\n  );\n}\n\nexport default LayerStepper;\n","import {\n  toJsonObject,\n  TypeJsonObject,\n  TypeWindow,\n  TypeButtonPanel,\n  payloadIsALayerConfig,\n  payloadIsRemoveGeoViewLayer,\n} from 'geoview-core';\nimport { DetailedReactHTMLElement } from 'react';\n\nimport LayerStepper from './layer-stepper';\n\ntype TypePanelContentProps = {\n  buttonPanel: TypeButtonPanel;\n  mapId: string;\n};\n\nconst w = window as TypeWindow;\n\n/**\n * A react component that displays the details panel content\n *\n * @param {TypePanelContentProps} props the properties of the pane content\n * @returns {JSX.Element} A React JSX Element with the details panel\n */\nfunction PanelContent(props: TypePanelContentProps): JSX.Element {\n  const { mapId, buttonPanel } = props;\n\n  const { cgpv } = w;\n  const { api, react, ui } = cgpv;\n  const { useState, useEffect } = react;\n  const [addLayerVisible, setAddLayerVisible] = useState(false);\n  const [mapLayers, setMapLayers] = useState<string[]>([]);\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const [legend, setLegend] = useState<DetailedReactHTMLElement<{}, HTMLElement>>();\n  const [actionMenuAnchorElement, setActionMenuAnchorElement] = useState<null | HTMLElement>(null);\n  const [isExpandAll, setExpandAll] = useState<boolean>(false);\n  const [isHideAll, setHideAll] = useState<boolean>(false);\n  const {\n    IconButton,\n    AddIcon,\n    Box,\n    ArrowDownIcon,\n    ArrowRightIcon,\n    VisibilityIcon,\n    VisibilityOffIcon,\n    Menu,\n    MenuItem,\n    MenuIcon,\n    ListItemIcon,\n    ListItemText,\n  } = ui.elements;\n\n  const { displayLanguage } = api.map(mapId!);\n\n  const translations: TypeJsonObject = toJsonObject({\n    en: {\n      addLayer: 'Add Layer',\n      expandAll: 'Expand Groups',\n      collapseAll: 'Collapse Groups',\n      showAll: 'Show All',\n      hideAll: 'Hide All',\n    },\n    fr: {\n      addLayer: 'Ajouter Couche',\n      expandAll: 'Élargir les groupes',\n      collapseAll: 'Réduire les groupes',\n      showAll: 'Montrer tout',\n      hideAll: 'Cacher tout',\n    },\n  });\n\n  const sxClasses = {\n    mainContainer: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: 'inherit',\n    },\n    topControls: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n    addLayerSection: {\n      display: 'flex',\n      alignItems: 'center',\n      marginTop: 'auto',\n      justifyContent: 'end',\n    },\n  };\n\n  const actionMenuOpen = Boolean(actionMenuAnchorElement);\n\n  const addLayer = (addGeoviewLayerId: string) => {\n    if (Object.keys(api.map(mapId).layer.geoviewLayers).includes(addGeoviewLayerId)) {\n      setMapLayers((orderedLayers) => [addGeoviewLayerId, ...orderedLayers]);\n    } else {\n      console.error('geoviewLayerId is not in the layers list');\n    }\n  };\n\n  const removeLayer = (removeGeoviewLayerId: string) => {\n    setMapLayers((orderedLayers) => orderedLayers.filter((layerId) => layerId !== removeGeoviewLayerId));\n  };\n\n  useEffect(() => {\n    setMapLayers(Object.keys(api.map(mapId!).layer.geoviewLayers));\n    api.event.on(\n      api.eventNames.LAYER.EVENT_REMOVE_LAYER,\n      (payload) => {\n        if (payloadIsRemoveGeoViewLayer(payload)) {\n          removeLayer(payload.geoviewLayer.geoviewLayerId);\n        }\n      },\n      mapId\n    );\n    api.event.on(\n      api.eventNames.LAYER.EVENT_ADD_LAYER,\n      (payload) => {\n        if (payloadIsALayerConfig(payload)) {\n          api.event.on(\n            api.eventNames.LAYER.EVENT_LAYER_ADDED,\n            () => {\n              addLayer(payload.layerConfig.geoviewLayerId);\n              api.event.off(api.eventNames.LAYER.EVENT_LAYER_ADDED, mapId, payload.layerConfig.geoviewLayerId);\n            },\n            mapId,\n            payload.layerConfig.geoviewLayerId\n          );\n        }\n      },\n      mapId\n    );\n    return () => {\n      api.event.off(api.eventNames.LAYER.EVENT_ADD_LAYER, mapId);\n      api.event.off(api.eventNames.LAYER.EVENT_REMOVE_LAYER, mapId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setLegend(api.map(mapId!).legend.createLegend({ layerIds: mapLayers, isRemoveable: true, canSetOpacity: true }));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [mapLayers]);\n\n  useEffect(() => {\n    api.event.on(\n      api.eventNames.PANEL.EVENT_PANEL_CLOSE,\n      () => {\n        setAddLayerVisible(false);\n      },\n      mapId,\n      buttonPanel.buttonPanelId\n    );\n\n    return () => {\n      api.event.off(api.eventNames.PANEL.EVENT_PANEL_CLOSE, mapId, buttonPanel.buttonPanelId);\n    };\n  }, [api, buttonPanel.buttonPanelId, mapId]);\n\n  useEffect(() => {\n    setLegend(\n      api.map(mapId!).legend.createLegend({ layerIds: mapLayers, isRemoveable: true, canSetOpacity: true, expandAll: isExpandAll })\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isExpandAll]);\n\n  useEffect(() => {\n    setLegend(api.map(mapId!).legend.createLegend({ layerIds: mapLayers, isRemoveable: true, canSetOpacity: true, hideAll: isHideAll }));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isHideAll]);\n\n  const handleShowAddLayer = () => {\n    // actionMenuOpen = Boolean(actionMenuAnchorElement);\n    setAddLayerVisible((state: boolean) => !state);\n  };\n\n  const handleExpandMenuClick = (event: React.MouseEvent<HTMLElement>) => {\n    setActionMenuAnchorElement(event.currentTarget);\n  };\n  const handleCloseMenu = () => {\n    setActionMenuAnchorElement(null);\n  };\n\n  const handleExpandAllClick = (isExpand: boolean) => {\n    setExpandAll(isExpand);\n    handleCloseMenu();\n  };\n\n  const handleShowAllClick = (isShow: boolean) => {\n    setHideAll(!isShow);\n    handleCloseMenu();\n  };\n\n  return (\n    <>\n      <Menu anchorEl={actionMenuAnchorElement} open={actionMenuOpen} onClose={handleCloseMenu}>\n        <MenuItem onClick={() => handleExpandAllClick(true)}>\n          <ListItemIcon>\n            <ArrowDownIcon />\n          </ListItemIcon>\n          <ListItemText>{translations[displayLanguage].expandAll}</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={() => handleExpandAllClick(false)}>\n          <ListItemIcon>\n            <ArrowRightIcon />\n          </ListItemIcon>\n          <ListItemText>{translations[displayLanguage].collapseAll}</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={() => handleShowAllClick(true)}>\n          <ListItemIcon>\n            <VisibilityIcon />\n          </ListItemIcon>\n          <ListItemText>{translations[displayLanguage].showAll}</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={() => handleShowAllClick(false)}>\n          <ListItemIcon>\n            <VisibilityOffIcon />\n          </ListItemIcon>\n          <ListItemText>{translations[displayLanguage].hideAll}</ListItemText>\n        </MenuItem>\n      </Menu>\n      <Box sx={sxClasses.mainContainer}>\n        {addLayerVisible && <LayerStepper mapId={mapId!} setAddLayerVisible={setAddLayerVisible} />}\n        <Box sx={sxClasses.topControls} style={{ display: addLayerVisible ? 'none' : 'flex' }}>\n          <div>\n            <IconButton color=\"primary\" onClick={handleExpandMenuClick}>\n              <MenuIcon />\n            </IconButton>\n          </div>\n          <Box onClick={handleShowAddLayer}>\n            {translations[displayLanguage].addLayer}\n            <IconButton>\n              <AddIcon />\n            </IconButton>\n          </Box>\n        </Box>\n        <div style={{ display: addLayerVisible ? 'none' : 'block' }}>{legend}</div>\n      </Box>\n    </>\n  );\n}\n\nexport default PanelContent;\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport {\n  Cast,\n  AbstractPlugin,\n  toJsonObject,\n  TypeJsonObject,\n  TypeWindow,\n  TypePluginOptions,\n  TypeButtonPanel,\n  TypeIconButtonProps,\n  TypePanelProps,\n  AnySchemaObject,\n} from 'geoview-core';\nimport PanelContent from './panel-content';\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-layers-panel.json';\n\nconst w = window as TypeWindow;\n\n/**\n * Create a class for the plugin instance\n */\nclass LayersPanelPlugin extends AbstractPlugin {\n  // store the created button panel object\n  buttonPanel: TypeButtonPanel | null;\n\n  constructor(pluginId: string, props: TypePluginOptions) {\n    super(pluginId, props);\n    this.buttonPanel = null;\n  }\n\n  /**\n   * Return the schema that is defined for this package\n   *\n   * @returns {AnySchemaObject} returns the schema for this package\n   */\n  schema = (): AnySchemaObject => schema;\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations: TypeJsonObject = toJsonObject({\n    en: {\n      layersPanel: 'Layers',\n    },\n    fr: {\n      layersPanel: 'Couches',\n    },\n  });\n\n  /**\n   * Added function called after the plugin has been initialized\n   */\n  added = (): void => {\n    const { mapId } = this.pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    // access the api calls\n    const { api, ui } = cgpv;\n    const { LayersOutlinedIcon } = ui.elements;\n    const { displayLanguage } = api.map(mapId);\n\n    let panelStatus = false;\n\n    panelStatus = this.configObj?.isOpen?.large as boolean;\n\n    // button props\n    const button: TypeIconButtonProps = {\n      id: 'layersPanelButton',\n      tooltip: this.translations[displayLanguage].layersPanel as string,\n      tooltipPlacement: 'right',\n      children: <LayersOutlinedIcon />,\n      visible: true,\n    };\n\n    // panel props\n    const panel: TypePanelProps = {\n      title: this.translations[displayLanguage].layersPanel,\n      icon: '<i class=\"material-icons\">layers</i>',\n      width: 200,\n      status: panelStatus,\n    };\n\n    // create a new button panel on the app-bar\n    this.buttonPanel = api.map(mapId).appBarButtons.createAppbarPanel(button, panel, null);\n\n    // set panel content\n    this.buttonPanel?.panel?.changeContent(<PanelContent buttonPanel={this.buttonPanel} mapId={mapId} />);\n  };\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  removed(): void {\n    const { mapId } = this.pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    // access the api calls\n    const { api } = cgpv;\n\n    if (this.buttonPanel) {\n      api.map(mapId).appBarButtons.removeAppbarPanel(this.buttonPanel.buttonPanelId);\n    }\n  }\n}\n\nexport default LayersPanelPlugin;\n\nw.plugins = w.plugins || {};\nw.plugins['layers-panel'] = Cast<AbstractPlugin>(LayersPanelPlugin);\n"],"names":["w","window","mapId","setAddLayerVisible","cgpv","api","react","ui","layerTypes","ESRI_DYNAMIC","ESRI_FEATURE","GEOJSON","WMS","WFS","OGC_FEATURE","XYZ_TILES","GEOCORE","useState","useEffect","elements","Select","Stepper","TextField","Button","ButtonGroup","Autocomplete","CircularProgressBase","Box","IconButton","CloseIcon","activeStep","setActiveStep","layerURL","setLayerURL","layerType","setLayerType","layerList","setLayerList","layerName","setLayerName","layerEntries","setLayerEntries","isLoading","setIsLoading","sxClasses","buttonGroup","paddingTop","gap","isMultiple","layerOptions","event","on","eventNames","SNACKBAR","EVENT_SNACKBAR_OPEN","payload","message","value","off","esriOptions","type","err","capability","emitErrorEmpty","textField","emit","snackbarMessagePayload","emitErrorServer","serviceName","emitErrorProj","proj","supportedProj","join","wmsValidation","projection","projections","map","currentProjection","getCode","split","baseUrl","queryString","urlParams","URLSearchParams","layersParam","get","geoUtilities","getWMSServiceMetadata","wms","Capability","Layer","CRS","includes","Error","layers","hasChildLayers","layer","length","forEach","childLayer","push","Name","Title","layerId","wfsValidation","getWFSServiceMetadata","wfs","FeatureTypeList","FeatureType","aFeatureType","ogcFeatureValidation","keys","fetch","response","json","every","key","Object","collections","id","title","geocoreValidation","indexOf","replaceAll","esriValidation","getESRIServiceMetadata","esri","capabilities","aLayer","name","xyzValidation","tiles","i","dataAccessPath","source","en","fr","geoJSONValidation","pop","replace","handleStep2","valid","undefined","handleStepLast","geoviewLayerId","generateId","LAYER","EVENT_LAYER_ADDED","url","getMapServerUrl","layerConfig","geoviewLayerName","geoviewLayerType","metadataAccessPath","listOfLayerEntryConfig","setTimeout","addGeoviewLayer","handleBack","prevActiveStep","handleNameLayer","target","NavButtons","isFirst","isLast","handleNext","sx","padding","variant","onClick","display","justifyContent","zIndex","color","position","top","orientation","steps","stepLabel","children","stepContent","width","label","onChange","trim","multiline","layerTokens","toUpperCase","parseInt","endsWith","Number","isNaN","fullWidth","labelId","inputLabel","menuItems","item","multiple","disableCloseOnSelect","disableClearable","options","getOptionLabel","option","renderOption","props","newValue","x","renderInput","params","buttonPanel","addLayerVisible","mapLayers","setMapLayers","legend","setLegend","actionMenuAnchorElement","setActionMenuAnchorElement","isExpandAll","setExpandAll","isHideAll","setHideAll","AddIcon","ArrowDownIcon","ArrowRightIcon","VisibilityIcon","VisibilityOffIcon","Menu","MenuItem","MenuIcon","ListItemIcon","ListItemText","displayLanguage","translations","toJsonObject","addLayer","expandAll","collapseAll","showAll","hideAll","mainContainer","flexDirection","height","topControls","addLayerSection","alignItems","marginTop","actionMenuOpen","Boolean","geoviewLayers","EVENT_REMOVE_LAYER","removeGeoviewLayerId","payloadIsRemoveGeoViewLayer","geoviewLayer","orderedLayers","filter","EVENT_ADD_LAYER","payloadIsALayerConfig","addGeoviewLayerId","console","error","createLegend","layerIds","isRemoveable","canSetOpacity","PANEL","EVENT_PANEL_CLOSE","buttonPanelId","handleCloseMenu","handleExpandAllClick","isExpand","handleShowAllClick","isShow","anchorEl","open","onClose","style","currentTarget","state","LayersPanelPlugin","pluginId","schema","defaultConfig","layersPanel","panelStatus","pluginProps","LayersOutlinedIcon","configObj","isOpen","large","button","tooltip","tooltipPlacement","visible","panel","icon","status","appBarButtons","createAppbarPanel","changeContent","this","removeAppbarPanel","AbstractPlugin","plugins","Cast"],"sourceRoot":""}